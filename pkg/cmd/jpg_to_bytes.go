/*
 * The code is automatically generated by the Goland.
 * Copyright © Aquarian-Age. All Rights Reserved.
 * Licensed under MIT.
 */

package cmd

import (
	"bytes"
	"fmt"
	"image/jpeg"
	"image/png"
	"io"
	"log"
	"os"
)

// JpgToBytes name(/a/b/aaa.jgp)
func JpgToBytes(name string) (error, []byte) {
	f, err := os.Open(name)
	if err != nil {
		log.Println(err)
	}

	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, f); err != nil {
		log.Println(err)
	}
	err = f.Close()
	if err != nil {
		return err, nil
	}
	byteFile := buf.Bytes()
	return nil, byteFile
}

// ByteToJpg 字节转jpg
func ByteToJpg(byteFile []byte, path, name string) {
	r := bytes.NewReader(byteFile)
	img, err := jpeg.Decode(r)
	if err != nil {
		log.Println(err)
	}
	fileName := path + name
	out, err := os.Create(fileName)
	if err != nil {
		fmt.Println(err)
	}
	defer func(out *os.File) {
		err := out.Close()
		if err != nil {
			log.Println(err)
		}
	}(out)
	err = jpeg.Encode(out, img, nil)
	if err != nil {
		return
	}
}

// ByteToPng 字节转png
func ByteToPng(byteFile []byte, path, name string) {
	r := bytes.NewReader(byteFile)
	img, err := png.Decode(r)
	if err != nil {
		log.Println(err)
	}
	fileName := path + name
	out, err := os.Create(fileName)
	if err != nil {
		fmt.Println(err)
	}
	defer func(out *os.File) {
		err := out.Close()
		if err != nil {
			log.Println(err)
		}
	}(out)
	err = png.Encode(out, img)
	if err != nil {
		return
	}
}
