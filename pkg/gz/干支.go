/*
 * The code is automatically generated by the Goland.
 * Copyright © Aquarian-Age. All Rights Reserved.
 * Licensed under MIT
 */

package gz

import (
	"math"
	"time"

	"github.com/starainrt/astro/calendar"
)

var (
	Gans = []string{"err", "甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"}
	Zhis = []string{"err", "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"}
	Jmc  = []string{
		"冬至", "小寒", "大寒", "立春", "雨水", "惊蛰",
		"春分", "清明", "谷雨", "立夏", "小满", "芒种",
		"夏至", "小暑", "大暑", "立秋", "处暑", "白露",
		"秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至",
	}
)

// GanZhi 干支信息
type GanZhi struct {
	year, month, day, hour int
	YGZ                    string `json:"ygz"`
	MGZ                    string `json:"mgz"`
	DGZ                    string `json:"dgz"`
	HGZ                    string `json:"hgz"`
}

// NewGanZhi 干支　精确到时
func NewGanZhi(year, month, day, hour int) *GanZhi {
	cust := time.Date(year, time.Month(month), day, hour, 0, 0, 0, time.Local)
	lcb, _ := fixLiChun(year, cust)
	yg, yz := yearGZ(year, lcb)
	ygz := yg + yz
	arrT, _ := getJieArr(year)
	jieqib, index := findJie(cust, arrT)
	mgz := monthGZ(cust, lcb, jieqib, index)
	dgz, gn := dayGanZhi(year, month, day)
	hgz := GetHourGZ(gn, hour)
	return &GanZhi{
		year:  year,
		month: month,
		day:   day,
		hour:  hour,
		YGZ:   ygz,
		MGZ:   mgz,
		DGZ:   dgz,
		HGZ:   hgz,
	}
}

//传入阳历年 立春布尔值 返回年干 年支 年干支
//年干支
func yearGZ(year int, lcb bool) (string, string) {
	var aliasGan, aliasZhi string
	switch lcb {
	case false: //日期在立春之前
		//干
		g := 1 + (year+6)%10
		if g -= 1; g < 1 {
			g += 10
		}
		aliasGan = Gans[g] //Gan
		//支
		z := 1 + (year+8)%12
		if z -= 1; z < 1 {
			z += 12
		}
		aliasZhi = Zhis[z]
	case true: //日期在立春之后
		yearg := 1 + (year+6)%10
		yearz := 1 + (year+8)%12
		aliasGan = Gans[yearg] //Gan
		aliasZhi = Zhis[yearz]
	}

	return aliasGan, aliasZhi

}

//传入指定时间　立春布尔值　立春日时间戳　节气布尔值　节气索引值
func monthGZ(cust time.Time, lcb bool, jieqib bool, index int) string {
	b := jieqib
	yg, _ := yearGZ(cust.Year(), lcb)
	gzArr := mgzArr(yg)

	if (b == false && index == 0) && lcb == false { //在本年立春之前
		index -= 1
		if index < 0 {
			index += 12
		}
		index -= 1
	} else if (b == false && index == 0) && lcb == true {
		index -= 1
		if index < 0 {
			index += 12
		}
	} else if b == true {
		index -= 1
		if index < 0 {
			index += 12
		}
	}
	return gzArr[index]
}

//传入阳历日期 返回日干支 日干数字 1甲 2乙 3丙...10癸
func dayGanZhi(year, month, day int) (string, int) {
	t := time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.Local)
	jd := calendar.Date2JDE(t)
	jdI := int(math.Ceil(jd)) //>=
	gn := 1 + (jdI%60-1)%10   //干
	if gn == 0 {
		gn += 10
	}
	z := 1 + (jdI%60+1)%12 //支
	//g 日干数字
	daygM := Gans[gn]
	dayzM := Zhis[z]
	dgz := daygM + dayzM
	return dgz, gn
}

// GetHourGZ 计算时干支
//传入日干数字 现代24小时制的时间数字 返回对应的干支
func GetHourGZ(gn, hour int) string {
	h := h24Toh12(hour)
	arr := hgzArr(gn)
	return arr[h-1]
}

//gn:1=甲 gn:2=乙 gn:10=癸
//五鼠遁元
func hgzArr(gn int) []string {
	gan := []string{"甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"}
	zhi := []string{"子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"}
	var arr []string //月干支数组
	switch gn {
	case 1, 6: //甲己 甲子
		end := gan
		head := gan
		arr = arrX(gan, zhi, head, end)
	case 2, 7: //乙庚 丙子
		end := gan[:2]
		head := gan[2:]
		arr = arrX(gan, zhi, head, end)
	case 3, 8: //丙辛 戊子
		end := gan[:4]
		head := gan[4:]
		arr = arrX(gan, zhi, head, end)
	case 4, 9: //丁壬 庚子
		end := gan[:6]
		head := gan[6:]
		arr = arrX(gan, zhi, head, end)
	case 5, 10: //戊癸 壬子
		end := gan[:8]
		head := gan[8:]
		arr = arrX(gan, zhi, head, end)
	}
	return arr
}

//现代24小时时间转换为古代12时辰
func h24Toh12(h int) int {
	var h12 int
	switch h {
	case 23, 00:
		h12 = 1
	case 1, 2:
		h12 = 2
	case 3, 4:
		h12 = 3
	case 5, 6:
		h12 = 4
	case 7, 8:
		h12 = 5
	case 9, 10:
		h12 = 6
	case 11, 12:
		h12 = 7
	case 13, 14:
		h12 = 8
	case 15, 16:
		h12 = 9
	case 17, 18:
		h12 = 10
	case 19, 20:
		h12 = 11
	case 21, 22:
		h12 = 12
	}
	return h12
}

// GetYGZ 年干支
func GetYGZ(year, month, day int) string {
	cust := time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.Local) //精确到时
	lcb, _ := fixLiChun(year, cust)
	g, z := yearGZ(year, lcb)
	return g + z
}

// GetMonthGZ 月干支
//以12节气定月干支 传入阳历时间 返回月干支
func GetMonthGZ(year, month, day, hour int) string {
	cust := time.Date(year, time.Month(month), day, hour, 0, 0, 0, time.Local)
	arrT, _ := getJieArr(year)
	b, index := findJie(cust, arrT)
	lcb, _ := fixLiChun(year, cust)
	yg, _ := yearGZ(year, lcb)
	gzArr := mgzArr(yg)

	if (b == false && index == 0) && lcb == false { //在本年立春之前
		index -= 1
		if index < 0 {
			index += 12
		}
		index -= 1
	} else if (b == false && index == 0) && lcb == true {
		index -= 1
		if index < 0 {
			index += 12
		}
	} else if b == true {
		index -= 1
		if index < 0 {
			index += 12
		}
	}
	return gzArr[index]
}

// 五虎盾元 甲己之年丙作初，乙庚之歲戊為頭，丙辛歲首從庚起，丁壬壬位順流行，若問戊癸何方法，甲寅之上好推求
// 传入年干 返回本年月干支数组
// 月干支数组
func mgzArr(yearGan string) []string {
	gan := []string{"甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"}
	zhi := []string{"寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥", "子", "丑"} //正月建寅
	var arr []string                                                            //月干支数组
	switch yearGan {
	case gan[0], gan[5]: //甲己 丙寅
		end := gan[:2]
		head := gan[2:]
		arr = arrX(gan, zhi, head, end)
	case gan[1], gan[6]: //乙庚 戊寅
		end := gan[:4]
		head := gan[4:]
		arr = arrX(gan, zhi, head, end)
	case gan[2], gan[7]: //丙辛 庚寅
		end := gan[:6]
		head := gan[6:]
		arr = arrX(gan, zhi, head, end)
	case gan[3], gan[8]: //丁壬 壬寅
		end := gan[:8]
		head := gan[8:]
		arr = arrX(gan, zhi, head, end)
	case gan[4], gan[9]: //戊癸 甲寅
		end := gan
		head := gan
		arr = arrX(gan, zhi, head, end)
	}
	return arr
}

//干支数组
func arrX(gan, zhi, head, end []string) []string {
	var arr []string
	gan = append(head, end...)
	gan = append(gan, gan...)
	for i := 0; i < len(gan); i++ {
		for j := i; j < len(zhi); j++ {
			s := gan[j] + zhi[j]
			arr = append(arr, s)
			if j == i {
				break
			}
		}
	}
	return arr
}

// GetDayGZ 日干支
func GetDayGZ(year, month, day int) string {
	dgz, _ := dayGanZhi(year, month, day)
	return dgz
}
