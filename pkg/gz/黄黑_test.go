/*
 * The code is automatically generated by the Goland.
 * Copyright © Aquarian-Age. All Rights Reserved.
 * Licensed under MIT
 */

package gz

import (
	"fmt"
	"strings"
	"testing"
)

func TestHuangHei(t *testing.T) {
	arr := []string{"寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥", "子", "丑"}
	subarr := [][]string{
		{"子", "辰", "戌", "丑", "巳", "未", "寅", "午", "申", "卯", "酉", "亥"},
		{"寅", "午", "子", "卯", "未", "酉", "辰", "申", "戌", "巳", "亥", "丑"},
		{"辰", "申", "寅", "巳", "酉", "亥", "午", "戌", "子", "未", "丑", "卯"},
		{"午", "戌", "辰", "未", "亥", "丑", "申", "子", "寅", "酉", "卯", "巳"},
		{"申", "子", "午", "酉", "丑", "卯", "戌", "寅", "辰", "亥", "巳", "未"},
		{"戌", "寅", "申", "亥", "卯", "巳", "子", "辰", "午", "丑", "未", "酉"},
		{"子", "辰", "戌", "丑", "巳", "未", "寅", "午", "申", "卯", "酉", "亥"},
		{"寅", "午", "子", "卯", "未", "酉", "辰", "申", "戌", "巳", "亥", "丑"},
		{"辰", "申", "寅", "巳", "酉", "亥", "午", "戌", "子", "未", "丑", "卯"},
		{"午", "戌", "辰", "未", "亥", "丑", "申", "子", "寅", "酉", "卯", "巳"},
		{"申", "子", "午", "酉", "丑", "卯", "戌", "寅", "辰", "亥", "巳", "未"},
		{"戌", "寅", "申", "亥", "卯", "巳", "子", "辰", "午", "丑", "未", "酉"},
	}
	want := [][]string{
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
		{"青龙", "金匮", "司命", "明堂", "天德", "玉堂", "天刑", "白虎", "天牢", "朱雀", "玄武", "勾陈"},
	}
	for i := 0; i < len(arr); i++ {
		for j := 0; j < len(subarr); j++ {
			s := HuangHei(arr[i], subarr[i][j])
			s1 := GetRiHuangHei(arr[i], subarr[i][j])
			if !strings.EqualFold(s, s1) {
				fmt.Println(s, false, arr[i], subarr[i][j], s1)
			}
			if !strings.EqualFold(s, want[i][j]) {
				t.Errorf("func HuangHei(%s %s)=%s want:%s", arr[i], subarr[i][j], s, want[i][j])
			}
		}
	}
}
